//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace RainMan
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::RainMan.RainMan_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::RainMan.RainMan_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::RainMan.RainMan_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace RainMan.RainMan_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[33];
            _typeNameTable[0] = "RainMan.ColorSlider";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Double";
            _typeNameTable[3] = "RainMan.GroupBuilder";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[5] = "RainMan.Common.NavigationHelper";
            _typeNameTable[6] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[7] = "RainMan.Common.ObservableDictionary";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "RainMan.LoadingDialog";
            _typeNameTable[11] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[12] = "Windows.UI.Xaml.RoutedEventHandler";
            _typeNameTable[13] = "Int32";
            _typeNameTable[14] = "RainMan.testConverter";
            _typeNameTable[15] = "RainMan.toColorConvertor";
            _typeNameTable[16] = "RainMan.Main";
            _typeNameTable[17] = "RainMan.ManageGroup";
            _typeNameTable[18] = "RainMan.DataTimeConverter";
            _typeNameTable[19] = "System.Collections.Generic.IList`1<Windows.UI.Xaml.DependencyObject>";
            _typeNameTable[20] = "RainMan.RadarPage";
            _typeNameTable[21] = "RainMan.RainAmount";
            _typeNameTable[22] = "RainMan.RouteBuilder";
            _typeNameTable[23] = "RainMan.NameSuggestionConverter";
            _typeNameTable[24] = "RainMan.PathNameConverter";
            _typeNameTable[25] = "RainMan.AvgRainConverter";
            _typeNameTable[26] = "RainMan.EstimatedLengthConverter";
            _typeNameTable[27] = "RainMan.EstimatedTimeConverter";
            _typeNameTable[28] = "RainMan.RainToHeight";
            _typeNameTable[29] = "RainMan.RoutePredictions";
            _typeNameTable[30] = "RainMan.toColorBrushConverter";
            _typeNameTable[31] = "RainMan.toTextSizeConverter";
            _typeNameTable[32] = "RainMan.Routes";

            _typeTable = new global::System.Type[33];
            _typeTable[0] = typeof(global::RainMan.ColorSlider);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::System.Double);
            _typeTable[3] = typeof(global::RainMan.GroupBuilder);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[5] = typeof(global::RainMan.Common.NavigationHelper);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[7] = typeof(global::RainMan.Common.ObservableDictionary);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::RainMan.LoadingDialog);
            _typeTable[11] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.RoutedEventHandler);
            _typeTable[13] = typeof(global::System.Int32);
            _typeTable[14] = typeof(global::RainMan.testConverter);
            _typeTable[15] = typeof(global::RainMan.toColorConvertor);
            _typeTable[16] = typeof(global::RainMan.Main);
            _typeTable[17] = typeof(global::RainMan.ManageGroup);
            _typeTable[18] = typeof(global::RainMan.DataTimeConverter);
            _typeTable[19] = typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.DependencyObject>);
            _typeTable[20] = typeof(global::RainMan.RadarPage);
            _typeTable[21] = typeof(global::RainMan.RainAmount);
            _typeTable[22] = typeof(global::RainMan.RouteBuilder);
            _typeTable[23] = typeof(global::RainMan.NameSuggestionConverter);
            _typeTable[24] = typeof(global::RainMan.PathNameConverter);
            _typeTable[25] = typeof(global::RainMan.AvgRainConverter);
            _typeTable[26] = typeof(global::RainMan.EstimatedLengthConverter);
            _typeTable[27] = typeof(global::RainMan.EstimatedTimeConverter);
            _typeTable[28] = typeof(global::RainMan.RainToHeight);
            _typeTable[29] = typeof(global::RainMan.RoutePredictions);
            _typeTable[30] = typeof(global::RainMan.toColorBrushConverter);
            _typeTable[31] = typeof(global::RainMan.toTextSizeConverter);
            _typeTable[32] = typeof(global::RainMan.Routes);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ColorSlider() { return new global::RainMan.ColorSlider(); }
        private object Activate_3_GroupBuilder() { return new global::RainMan.GroupBuilder(); }
        private object Activate_7_ObservableDictionary() { return new global::RainMan.Common.ObservableDictionary(); }
        private object Activate_10_LoadingDialog() { return new global::RainMan.LoadingDialog(); }
        private object Activate_11_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_14_testConverter() { return new global::RainMan.testConverter(); }
        private object Activate_15_toColorConvertor() { return new global::RainMan.toColorConvertor(); }
        private object Activate_16_Main() { return new global::RainMan.Main(); }
        private object Activate_17_ManageGroup() { return new global::RainMan.ManageGroup(); }
        private object Activate_18_DataTimeConverter() { return new global::RainMan.DataTimeConverter(); }
        private object Activate_20_RadarPage() { return new global::RainMan.RadarPage(); }
        private object Activate_21_RainAmount() { return new global::RainMan.RainAmount(); }
        private object Activate_22_RouteBuilder() { return new global::RainMan.RouteBuilder(); }
        private object Activate_23_NameSuggestionConverter() { return new global::RainMan.NameSuggestionConverter(); }
        private object Activate_24_PathNameConverter() { return new global::RainMan.PathNameConverter(); }
        private object Activate_25_AvgRainConverter() { return new global::RainMan.AvgRainConverter(); }
        private object Activate_26_EstimatedLengthConverter() { return new global::RainMan.EstimatedLengthConverter(); }
        private object Activate_27_EstimatedTimeConverter() { return new global::RainMan.EstimatedTimeConverter(); }
        private object Activate_28_RainToHeight() { return new global::RainMan.RainToHeight(); }
        private object Activate_29_RoutePredictions() { return new global::RainMan.RoutePredictions(); }
        private object Activate_30_toColorBrushConverter() { return new global::RainMan.toColorBrushConverter(); }
        private object Activate_31_toTextSizeConverter() { return new global::RainMan.toTextSizeConverter(); }
        private object Activate_32_Routes() { return new global::RainMan.Routes(); }
        private void MapAdd_7_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_11_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_19_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::RainMan.RainMan_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  RainMan.ColorSlider
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_ColorSlider;
                userType.AddMemberName("RainAvg");
                userType.AddMemberName("Heightt");
                userType.AddMemberName("Widthh");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Double
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  RainMan.GroupBuilder
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_GroupBuilder;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  RainMan.Common.NavigationHelper
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  RainMan.Common.ObservableDictionary
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_7_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  String
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  RainMan.LoadingDialog
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_10_LoadingDialog;
                userType.AddMemberName("PathNames");
                userType.AddMemberName("OnClick");
                userType.AddMemberName("CurrentStepNum");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  System.Collections.Generic.List`1<String>
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_11_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.RoutedEventHandler
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Int32
                xamlType = new global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  RainMan.testConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_testConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  RainMan.toColorConvertor
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_toColorConvertor;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  RainMan.Main
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_Main;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  RainMan.ManageGroup
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_ManageGroup;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  RainMan.DataTimeConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_DataTimeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  System.Collections.Generic.IList`1<Windows.UI.Xaml.DependencyObject>
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_19_IList;
                xamlType = userType;
                break;

            case 20:   //  RainMan.RadarPage
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_RadarPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  RainMan.RainAmount
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_RainAmount;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  RainMan.RouteBuilder
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_RouteBuilder;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  RainMan.NameSuggestionConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_NameSuggestionConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  RainMan.PathNameConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_PathNameConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  RainMan.AvgRainConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_AvgRainConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  RainMan.EstimatedLengthConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_EstimatedLengthConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  RainMan.EstimatedTimeConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_27_EstimatedTimeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  RainMan.RainToHeight
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_28_RainToHeight;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  RainMan.RoutePredictions
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_RoutePredictions;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  RainMan.toColorBrushConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_toColorBrushConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  RainMan.toTextSizeConverter
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_31_toTextSizeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  RainMan.Routes
                userType = new global::RainMan.RainMan_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_Routes;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private void set_0_ColorSlider_RainAvg(object instance, object Value)
        {
            var that = (global::RainMan.ColorSlider)instance;
            that.RainAvg = (global::System.Double)Value;
        }
        private void set_1_ColorSlider_Heightt(object instance, object Value)
        {
            var that = (global::RainMan.ColorSlider)instance;
            that.Heightt = (global::System.Double)Value;
        }
        private void set_2_ColorSlider_Widthh(object instance, object Value)
        {
            var that = (global::RainMan.ColorSlider)instance;
            that.Widthh = (global::System.Double)Value;
        }
        private object get_3_GroupBuilder_NavigationHelper(object instance)
        {
            var that = (global::RainMan.GroupBuilder)instance;
            return that.NavigationHelper;
        }
        private object get_4_GroupBuilder_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.GroupBuilder)instance;
            return that.DefaultViewModel;
        }
        private object get_5_LoadingDialog_PathNames(object instance)
        {
            var that = (global::RainMan.LoadingDialog)instance;
            return that.PathNames;
        }
        private void set_5_LoadingDialog_PathNames(object instance, object Value)
        {
            var that = (global::RainMan.LoadingDialog)instance;
            that.PathNames = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private void set_6_LoadingDialog_OnClick(object instance, object Value)
        {
            var that = (global::RainMan.LoadingDialog)instance;
            that.OnClick = (global::Windows.UI.Xaml.RoutedEventHandler)Value;
        }
        private object get_7_LoadingDialog_CurrentStepNum(object instance)
        {
            var that = (global::RainMan.LoadingDialog)instance;
            return that.CurrentStepNum;
        }
        private void set_7_LoadingDialog_CurrentStepNum(object instance, object Value)
        {
            var that = (global::RainMan.LoadingDialog)instance;
            that.CurrentStepNum = (global::System.Int32)Value;
        }
        private object get_8_Main_NavigationHelper(object instance)
        {
            var that = (global::RainMan.Main)instance;
            return that.NavigationHelper;
        }
        private object get_9_Main_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.Main)instance;
            return that.DefaultViewModel;
        }
        private object get_10_ManageGroup_NavigationHelper(object instance)
        {
            var that = (global::RainMan.ManageGroup)instance;
            return that.NavigationHelper;
        }
        private object get_11_ManageGroup_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.ManageGroup)instance;
            return that.DefaultViewModel;
        }
        private object get_12_RadarPage_NavigationHelper(object instance)
        {
            var that = (global::RainMan.RadarPage)instance;
            return that.NavigationHelper;
        }
        private object get_13_RadarPage_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.RadarPage)instance;
            return that.DefaultViewModel;
        }
        private object get_14_RainAmount_NavigationHelper(object instance)
        {
            var that = (global::RainMan.RainAmount)instance;
            return that.NavigationHelper;
        }
        private object get_15_RainAmount_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.RainAmount)instance;
            return that.DefaultViewModel;
        }
        private object get_16_RouteBuilder_NavigationHelper(object instance)
        {
            var that = (global::RainMan.RouteBuilder)instance;
            return that.NavigationHelper;
        }
        private object get_17_RouteBuilder_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.RouteBuilder)instance;
            return that.DefaultViewModel;
        }
        private object get_18_RoutePredictions_NavigationHelper(object instance)
        {
            var that = (global::RainMan.RoutePredictions)instance;
            return that.NavigationHelper;
        }
        private object get_19_RoutePredictions_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.RoutePredictions)instance;
            return that.DefaultViewModel;
        }
        private object get_20_Routes_NavigationHelper(object instance)
        {
            var that = (global::RainMan.Routes)instance;
            return that.NavigationHelper;
        }
        private object get_21_Routes_DefaultViewModel(object instance)
        {
            var that = (global::RainMan.Routes)instance;
            return that.DefaultViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::RainMan.RainMan_XamlTypeInfo.XamlMember xamlMember = null;
            global::RainMan.RainMan_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "RainMan.ColorSlider.RainAvg":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.ColorSlider");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "RainAvg", "Double");
                xamlMember.Setter = set_0_ColorSlider_RainAvg;
                break;
            case "RainMan.ColorSlider.Heightt":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.ColorSlider");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "Heightt", "Double");
                xamlMember.Setter = set_1_ColorSlider_Heightt;
                break;
            case "RainMan.ColorSlider.Widthh":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.ColorSlider");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "Widthh", "Double");
                xamlMember.Setter = set_2_ColorSlider_Widthh;
                break;
            case "RainMan.GroupBuilder.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.GroupBuilder");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_3_GroupBuilder_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.GroupBuilder.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.GroupBuilder");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_4_GroupBuilder_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.LoadingDialog.PathNames":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.LoadingDialog");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "PathNames", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_5_LoadingDialog_PathNames;
                xamlMember.Setter = set_5_LoadingDialog_PathNames;
                break;
            case "RainMan.LoadingDialog.OnClick":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.LoadingDialog");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "OnClick", "Windows.UI.Xaml.RoutedEventHandler");
                xamlMember.Setter = set_6_LoadingDialog_OnClick;
                break;
            case "RainMan.LoadingDialog.CurrentStepNum":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.LoadingDialog");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "CurrentStepNum", "Int32");
                xamlMember.Getter = get_7_LoadingDialog_CurrentStepNum;
                xamlMember.Setter = set_7_LoadingDialog_CurrentStepNum;
                break;
            case "RainMan.Main.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.Main");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_8_Main_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.Main.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.Main");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_9_Main_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.ManageGroup.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.ManageGroup");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_10_ManageGroup_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.ManageGroup.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.ManageGroup");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_11_ManageGroup_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RadarPage.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RadarPage");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_12_RadarPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RadarPage.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RadarPage");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_13_RadarPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RainAmount.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RainAmount");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_14_RainAmount_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RainAmount.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RainAmount");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_15_RainAmount_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RouteBuilder.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RouteBuilder");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_16_RouteBuilder_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RouteBuilder.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RouteBuilder");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_17_RouteBuilder_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RoutePredictions.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RoutePredictions");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_18_RoutePredictions_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.RoutePredictions.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.RoutePredictions");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_19_RoutePredictions_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.Routes.NavigationHelper":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.Routes");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "NavigationHelper", "RainMan.Common.NavigationHelper");
                xamlMember.Getter = get_20_Routes_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "RainMan.Routes.DefaultViewModel":
                userType = (global::RainMan.RainMan_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RainMan.Routes");
                xamlMember = new global::RainMan.RainMan_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "RainMan.Common.ObservableDictionary");
                xamlMember.Getter = get_21_Routes_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::RainMan.RainMan_XamlTypeInfo.XamlSystemBaseType
    {
        global::RainMan.RainMan_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::RainMan.RainMan_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::RainMan.RainMan_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::RainMan.RainMan_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


